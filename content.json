{"meta":{"title":"QsBlog","subtitle":"","description":"一个Qs315490私有的云备忘录","author":"Qs315490","url":"https://315490.xyz","root":"/"},"pages":[{"title":"","date":"2025-10-31T10:46:06.779Z","updated":"2025-10-31T10:46:06.779Z","comments":true,"path":"404.html","permalink":"https://315490.xyz/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2019-12-31T16:00:00.000Z","updated":"2019-12-31T16:00:00.000Z","comments":true,"path":"about/index.html","permalink":"https://315490.xyz/about/index.html","excerpt":"","text":"个人档案没有梦想的咸鱼罢了"},{"title":"所有分类","date":"2025-10-31T10:46:06.785Z","updated":"2025-10-31T10:46:06.785Z","comments":true,"path":"categories/index.html","permalink":"https://315490.xyz/categories/index.html","excerpt":"","text":""},{"title":"","date":"2025-10-31T10:46:06.789Z","updated":"2025-10-31T10:46:06.789Z","comments":true,"path":"tags/index.html","permalink":"https://315490.xyz/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2025-10-31T10:46:06.785Z","updated":"2025-10-31T10:46:06.785Z","comments":true,"path":"friends/index.html","permalink":"https://315490.xyz/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"Ubuntu Locale总是包含其他配置","slug":"linux/Ubuntu-Locale总是包含其他配置","date":"2025-10-31T10:40:44.000Z","updated":"2025-10-31T10:40:44.000Z","comments":true,"path":"/2025/10/31/linux/Ubuntu-Locale总是包含其他配置/","permalink":"https://315490.xyz/2025/10/31/linux/Ubuntu-Locale%E6%80%BB%E6%98%AF%E5%8C%85%E5%90%AB%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE/","excerpt":"","text":"问题描述locale-gen 生成的locale总是包含其他配置，例如： 123zh_CN.UTF-8en_US.UTF-8en_GB.UTF-8 但是locale.conf中只配置了其中一个:zh_CN.UTF-8 原因Ubuntu默认会安装 language-pack-en, 这些语言包会让locale-gen生成对应的locale对应 /var/lib/locales/supported.d/en 文件，这里面就是没配置但会生成的locale 解决方法卸载 language-pack-en，然后重新生成locale或者直接编辑 /var/lib/locales/supported.d/en 文件，删除不需要的locale","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"locale","slug":"linux/locale","permalink":"https://315490.xyz/categories/linux/locale/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://315490.xyz/tags/ubuntu/"},{"name":"locale","slug":"locale","permalink":"https://315490.xyz/tags/locale/"}]},{"title":"SysRq","slug":"linux/SysRq","date":"2025-10-30T09:48:46.000Z","updated":"2025-10-30T09:48:46.000Z","comments":true,"path":"/2025/10/30/linux/SysRq/","permalink":"https://315490.xyz/2025/10/30/linux/SysRq/","excerpt":"","text":"&#x2F;proc&#x2F;sysrq-trigger详解这是一组“魔术组合键”，只要内核没有被完全锁住，不管内核在做什么事情，使用这些组合键能即时打印出内核的信息。 使用SysRq组合键是了解系统目前运行情况的最佳方式。如果系统出现挂起的情况或在诊断一些和内核相关，比较怪异，比较难重现的问题的时候，使用SysRq键是个比较好的方式。 怎么打开和关闭SysRq组合键?为了安全起见，在红帽企业版Linux里面，默认SysRq组合键是关闭的。 打开这个功能，运行： 1echo 1 &gt; /proc/sys/kernel/sysrq 关闭这个功能： 1echo 0 &gt; /proc/sys/kernel/sysrq 如果想让此功能一直生效，在&#x2F;etc&#x2F;sysctl.conf里面设置kernel.sysrq的值为1。重新启动以后，此功能将会自动打开。 1echo &#x27;kernel.sysrq = 1&#x27; &gt; /etc/sysctl.conf 因为打开sysrq键的功能以后，有终端访问权限的用户将会拥有一些特别的功能。因此，除非是要调试，解决问题，一般情况下，不要打开此功能。如果一定要打开，请确保你的终端访问的安全性。 怎么触发一个sysrq事件?有几种方式能触发sysrq事件。在带有AT键盘的一般系统上，在终端上输入一下组合键: Alt+PrintScreen+[CommandKey] 例如，要让内核导出内存信息(CommandKey “m”)，你应该同时按下Alt 和 Print Screen 键，然后按下 M 键。 提示：此组合键在Xwindows上是无法使用的。所以，你先要转换到文本虚拟终端下。如果你当前是在图像界面， 能按Ctrl+Alt+F1转换到虚拟终端。 在串口终端上,要想获得同样的效果，需要先在终端上发送Break信号，然后在5秒内输入sysrq组合键。 如果你在机器上有root权限，你能把commandkey字符写入到&#x2F;proc&#x2F;sysrq-trigger文件。这能帮助你通过脚本或你不在系统终端上的时候触发sysrq事件。 1echo m &gt; /proc/sysrq-trigger 当我触发一个sysrq事件的时候，结果保存在什么地方? 当一个sysrq命令被触发，内核将会打印信息到内核的环形缓冲并输出到系统控制台。此信息一般也会通过syslog输出到&#x2F;var&#x2F;log&#x2F;messages。 有时候，可能系统已无法响应，syslogd可能无法记录此信息。在这种情况下，建议你设置一个串口终端来收集这个信息。 那些类型的sysrq事件能被触发? sysrq功能被打开后，有几种sysrq事件能被触发。不同的内核版本可能会有些不同。但有一些是共用的： CommandKey 功能 b 立即重新启动计算机 o 立即关闭计算机(如果机器设置并支持此项功能) m 导出关于内存分配的信息 t 导出线程状态信息 p 导出当前CPU寄存器信息和标志位的信息 c 故意让系统崩溃(在使用netdump或diskdump的时候有用) s 即时同步所有挂载的文件系统 u 立即重新挂载所有的文件系统为只读","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"sqsrq","slug":"linux/sqsrq","permalink":"https://315490.xyz/categories/linux/sqsrq/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"sysrq","slug":"sysrq","permalink":"https://315490.xyz/tags/sysrq/"}]},{"title":"Android 手动触发 dex2oat","slug":"android/android-dex2oat","date":"2025-10-15T14:27:29.000Z","updated":"2025-10-15T14:27:29.000Z","comments":true,"path":"/2025/10/15/android/android-dex2oat/","permalink":"https://315490.xyz/2025/10/15/android/android-dex2oat/","excerpt":"","text":"介绍 dex2oat运用 dex2oat 提前把dex编译成oat文件，提高应用运行效率。 AOT &amp; JITAndroid 从 L(5.0) 开始，引入了 ART 虚拟机，拥有了预先 (AOT) 编译的新特性，即在安装时ART就通过 dex2oat 工具来编译应用，提高应用运行时的效率。但是，安装过程执行dex2oat会增加安装应用的时间。 于是Android N(7.0)引入了新的机制，运行时 (ART) 包含一个具备代码分析功能的即时 (JIT) 编译器，有助于提高运行时性能，节省存储空间，以及加快应用及系统更新速度。JIT在软件安装时不进行编译而是根据用户的使用习惯来记录值得编译的内容 (包括软件运行时编译并保存，在闲时编译记录的需要编译而没来得及干的事情，而这些事情就是记录为speed-profile)。 编译模式从Android O(8.0)开始，官方支持4个编译模式。 verify：只运行 DEX 代码验证。 quicken：Android 11 或更低版本 运行 DEX 代码验证，并优化一些 DEX 指令，以获得更好的解译器性能。 speed：运行 DEX 代码验证，并对所有方法进行 AOT 编译。不优化任何类的类加载。 speed-profile：运行 DEX 代码验证，对配置文件中列出的方法进行 AOT 编译，并为配置文件中的类优化类加载。 Android 14 及更高版本 默认使用 speed-profile 编译过滤器进行编译；如果未提供配置文件，则使用 speed 编译过滤器进行编译。Android 13 及更低版本 默认使用 speed 编译过滤器进行编译。 以下是 Android 文档中并未明确提及的编译模式： space-profile: 依据配置文件优化空间使用 space: 优化空间使用 everything: 编译所有方法，也是占用手机容量空间最大的模式 操作限制而随着Android系统版本的更迭，发现原本可以在应用进程上触发dex2oat编译的方式，却在targetSdkVersion&gt;=29且Android 10+的系统上，不再允许使用。其原因是系统在targetSdkVersion=29的时候，对此做了限制，不允许应用进程上触发dex2oat编译（Android 运行时 (ART) 不再从应用进程调用 dex2oat。这项变更意味着 ART 将仅接受系统生成的 OAT 文件）（OAT为dex2oat后的产物）。 那当前是否会受到这个限制的影响呢？ 在2020年的时候Android 11系统正式发布，各大应用市场就开始限制App的targetSdkVersion&gt;=29，也就意味着，现如今App的targetSdkVersion&gt;=29是不可避免的。而且随着新Android设备的不断迭代，越来越多的用户，使用上了携带新系统的新机器，使得Android 10+系统的占有量逐步增加，目前为止Android 10+系统的占有量约占整体的30%~40%左右，也就是说这部分机器将会受到这个限制的影响。 cmd package compile是应用进程触发系统行为，然后由系统触发dex2oat的方式。不受targetSdkVersion&gt;=29的限制，但是需要root权限，且需要系统版本为Android 10+。 手动触发 dex2oat强制编译可通过如下命令 1cmd package compile -m &lt;compile-mode&gt; -f &lt;package-name&gt; 其中，&lt;compile-mode&gt; 可以是 verify、quicken、speed、speed-profile 之一，&lt;package-name&gt; 是要编译的包名。 编译所有应用 1cmd package compile -m &lt;compile-mode&gt; -f -a 示例speed-profile 某个应用 1cmd package compile -m speed-profile -f com.example.app speed-profile 所有应用 1cmd package compile -m speed-profile -f -a 日常在手机上手动执行dex2oat只需要 1cmd package compile -m speed -a 清除配置文件数据并移除编译后的代码对特定软件包 1cmd package compile --reset &lt;package-name&gt; 对所有软件包 1cmd package compile --reset -a 参考 Android官方文档","categories":[{"name":"Android","slug":"Android","permalink":"https://315490.xyz/categories/Android/"},{"name":"优化","slug":"Android/优化","permalink":"https://315490.xyz/categories/Android/%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://315490.xyz/tags/Android/"},{"name":"优化","slug":"优化","permalink":"https://315490.xyz/tags/%E4%BC%98%E5%8C%96/"},{"name":"dex2oat","slug":"dex2oat","permalink":"https://315490.xyz/tags/dex2oat/"}]},{"title":"Windows11 升级24H2之后无法关闭Hyper-V怎么办？","slug":"windows/Windows11_24H2后Hyper-V关不了","date":"2025-10-15T13:48:57.000Z","updated":"2025-10-15T13:48:57.000Z","comments":true,"path":"/2025/10/15/windows/Windows11_24H2后Hyper-V关不了/","permalink":"https://315490.xyz/2025/10/15/windows/Windows11_24H2%E5%90%8EHyper-V%E5%85%B3%E4%B8%8D%E4%BA%86/","excerpt":"","text":"前言在升级Windows 11至24H2版本后，因Microsoft为所有全新安装和升级的 Windows 11 默认开启了 Device&#x2F;Credential Guard功能，且该功能会调用Hyper-V功能（即基于虚拟化的安全性功能），导致部分用户会遇到无法关闭Hyper-V的情况，导致使用虚拟机过程中感觉运行卡顿、虚拟机无法启动等情况，可参考以下步骤操作关闭Hyper-V功能。 操作步骤1. 下载工具从 Microsoft 下载中心下载Device Guard and Credential Guard hardware readiness tool 2. 解压工具解压下载的文件，并进入解压后的文件夹。点击文件夹上方的地址栏，复制地址内容。 3. 终端目录切换鼠标右键点击Windows菜单Windows 11选择终端管理员，Windows 10选择 Windows PowerShell(管理员)并确保终端运行的Shell为PowerShell 在终端输入cd &lt;目录路径&gt;即可切换目录，例如： 1cd C:\\Temp\\dgreadiness_tool_v3.6 在终端或 PowerShell中输入cd，按下空格后 粘贴（右键或Ctrl+V）剪切板的路径，并按下回车，切换到对应文件夹目录路径。 4. 运行脚本先设置执行策略为RemoteSigned，否则会报错。复制并粘贴以下命令到终端，然后按下Enter键执行。 1set-ExecutionPolicy RemoteSigned 进入目录后在终端输入.\\DG，然后按下Tab键，会自动补全脚本名称，然后按下Enter键运行脚本。 1.\\DG_Readiness_Tool_v3.6.ps1 -Disable 5. 重启电脑完成执行后关闭终端或 PowerShell，并保存所有打开的文件，重启电脑。重启后Windows会进入Credential Guard Opt-out Tool，此时按下 Win 或 F3 后再按下回车即可继续。![Credential Guard Opt-out Tool](&#x2F;images&#x2F;windows_hyperv&#x2F;Credential Guard Opt-out Tool.webp) 6. 查看 基于虚拟化安全性 状态完成上述操作后，电脑会再次重启，进入Windows后即可看到 Device&#x2F;Credential Guard 已关闭。可通过Windows搜索栏输入“系统信息”进行查看。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/categories/Windows/"},{"name":"虚拟化","slug":"Windows/虚拟化","permalink":"https://315490.xyz/categories/Windows/%E8%99%9A%E6%8B%9F%E5%8C%96/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/tags/Windows/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://315490.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"虚拟机平台","slug":"虚拟机平台","permalink":"https://315490.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B3%E5%8F%B0/"},{"name":"HyperV","slug":"HyperV","permalink":"https://315490.xyz/tags/HyperV/"}]},{"title":"挂载多分区磁盘镜像","slug":"linux/command/挂载多分区磁盘镜像","date":"2025-01-02T05:50:56.000Z","updated":"2025-01-02T05:50:56.000Z","comments":true,"path":"/2025/01/02/linux/command/挂载多分区磁盘镜像/","permalink":"https://315490.xyz/2025/01/02/linux/command/%E6%8C%82%E8%BD%BD%E5%A4%9A%E5%88%86%E5%8C%BA%E7%A3%81%E7%9B%98%E9%95%9C%E5%83%8F/","excerpt":"","text":"losetup 命令1losetup [options] [loopdev] [file] 参数 说明 -a –all 显示所有loop设备及其关联的文件 -d –detach &lt;loopdev&gt; 断开loop设备 -f –find 自动选择第一个未使用的loop设备 -j –associated &lt;file&gt; 显示给定文件关联的loop设备 -o –offset &lt;offset&gt; 指定偏移量 –sizelimit &lt;size&gt; 数据结束设置为数据开始，不超过&lt;size&gt;的字节 -r –read-only 挂载为只读 -p –partscan 强制内核扫描loop设备的分区表 –show 如果 -f 参数存在，则显示分配的loop设备名 –direct-io 使用直接I&#x2F;O访问loop设备, 绕过系统缓存 –sector-size &lt;4096&#x2F;512&gt; 设置扇区大小，默认为512字节 使用loop设备挂载多分区磁盘镜像挂载镜像为loop设备123losetup /path/to/image# orlosetup --partscan --find --show /path/to/image 挂载分区正常挂载即可 1mount /dev/loopXpY /mnt 卸载loop设备123losetup -d /dev/loopX# or","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"command","slug":"linux/command","permalink":"https://315490.xyz/categories/linux/command/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"dd","slug":"dd","permalink":"https://315490.xyz/tags/dd/"},{"name":"mount","slug":"mount","permalink":"https://315490.xyz/tags/mount/"},{"name":"loop","slug":"loop","permalink":"https://315490.xyz/tags/loop/"},{"name":"losetup","slug":"losetup","permalink":"https://315490.xyz/tags/losetup/"}]},{"title":"openwrt小技巧","slug":"linux/openwrt/openwrt小技巧","date":"2024-12-05T07:32:54.000Z","updated":"2024-12-05T07:32:54.000Z","comments":true,"path":"/2024/12/05/linux/openwrt/openwrt小技巧/","permalink":"https://315490.xyz/2024/12/05/linux/openwrt/openwrt%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"","text":"更新需升级的软件包记录 OpenWrt&#x2F;LEDE 下更新所有待更新软件包的方法。 12opkg updateopkg list-upgradable | cut -f 1 -d &#x27; &#x27; | xargs opkg upgrade","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"openwrt","slug":"linux/openwrt","permalink":"https://315490.xyz/categories/linux/openwrt/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"https://315490.xyz/tags/openwrt/"},{"name":"opkg","slug":"opkg","permalink":"https://315490.xyz/tags/opkg/"}]},{"title":"修改开始菜单和任务栏默认设置","slug":"windows/修改开始菜单和任务栏默认设置","date":"2024-03-21T15:16:27.000Z","updated":"2024-03-21T15:16:27.000Z","comments":true,"path":"/2024/03/21/windows/修改开始菜单和任务栏默认设置/","permalink":"https://315490.xyz/2024/03/21/windows/%E4%BF%AE%E6%94%B9%E5%BC%80%E5%A7%8B%E8%8F%9C%E5%8D%95%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%A0%8F%E9%BB%98%E8%AE%A4%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"修改开始菜单和任务栏默认设置Windows10 测试通过 开始菜单 属性 说明 Size 确定磁贴的大小。 1x1 小磁贴 2x2 中等磁贴 4x2 宽磁贴 4x4 大磁贴 Row 指定磁贴显示在哪一行。 Column 指定磁贴显示在哪一列。 start:Tile使用 AppUserModelID 指定以下任一项： 通用 Windows 应用 Windows 8或Windows 8.1应用 请注意，AppUserModelID 区分大小写。 taskbar:DesktopAppDesktopApplicationLinkPath - 指定桌面应用程序的快捷方式、可执行程序或.lnk文件的路径。 start:DesktopApplicationTile未证实用于指定以下任一项： 属性 说明 DesktopApplicationID Windows 桌面应用程序 AppUserModelID DesktopApplicationLinkPath 已知文件夹中具有旧“开始菜单”文件夹中链接的应用程序 - 旧版“开始菜单”文件夹中的 Windows 桌面应用程序链接 - 旧版“开始菜单”文件夹中具有关联 .url 文件的 Web 链接磁贴 任务栏 使用 &lt;taskbar:UWA&gt; 和 AUMID 固定通用 Windows 平台应用 使用 &lt;taskbar:DesktopApp&gt; 和 桌面应用程序链接路径固定桌面应用程序 实例微软的文档实在看不懂，自己摸索出以下路径C:\\Users\\Default\\AppData\\Local\\Microsoft\\Windows\\shell\\DefaultLayouts.xml 1234567891011121314151617181920212223&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FullDefaultLayoutTemplate xmlns=&quot;http://schemas.microsoft.com/Start/2014/FullDefaultLayout&quot; xmlns:start=&quot;http://schemas.microsoft.com/Start/2014/StartLayout&quot; xmlns:taskbar=&quot;http://schemas.microsoft.com/Start/2014/TaskbarLayout&quot; Version=&quot;1&quot;&gt; &lt;StartLayoutCollection&gt; &lt;StartLayout GroupCellWidth=&quot;6&quot;&gt; &lt;start:Group LocalizedNameResourceTag=&quot;TileGrid_DefaultGroup1&quot;&gt; &lt;start:Tile Size=&quot;2x2&quot; Column=&quot;0&quot; Row=&quot;0&quot; AppUserModelID=&quot;Microsoft.WindowsStore_8wekyb3d8bbwe!App&quot; /&gt; &lt;start:Tile Size=&quot;2x2&quot; Column=&quot;2&quot; Row=&quot;0&quot; AppUserModelID=&quot;Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge&quot; /&gt; &lt;/start:Group&gt; &lt;/StartLayout&gt; &lt;/StartLayoutCollection&gt; &lt;TaskbarLayoutCollection&gt; &lt;TaskbarLayout&gt; &lt;taskbar:TaskbarPinList&gt; &lt;taskbar:DesktopApp DesktopApplicationLinkPath=&quot;%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\System Tools\\File Explorer.lnk&quot; /&gt; &lt;taskbar:UWA AppUserModelID=&quot;Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge&quot; /&gt; &lt;/taskbar:TaskbarPinList&gt; &lt;/TaskbarLayout&gt; &lt;/TaskbarLayoutCollection&gt;&lt;/FullDefaultLayoutTemplate&gt;","categories":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/categories/Windows/"},{"name":"小技巧","slug":"Windows/小技巧","permalink":"https://315490.xyz/categories/Windows/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/tags/Windows/"},{"name":"自定义","slug":"自定义","permalink":"https://315490.xyz/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/"}]},{"title":"Windows共享打印机常见错误","slug":"windows/Windows共享打印机常见错误","date":"2023-12-30T15:12:14.000Z","updated":"2023-12-30T15:12:14.000Z","comments":true,"path":"/2023/12/30/windows/Windows共享打印机常见错误/","permalink":"https://315490.xyz/2023/12/30/windows/Windows%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/","excerpt":"","text":"0xa未知，重试几次后问题解决。 0x180b共享服务器版本过低控制面板开启 SMB1.0/CIFS 重启解决 0x11b 与 0x40新版本Windows出现此问题，原因KB5005565这个更新导致使用注册表或卸载更新解决 注册表文件cmdPowerShell点击下载/files/0x11b.reg 123Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print]&quot;RpcAuthnLevelPrivacyEnabled&quot;=dword:01reg add &quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print&quot; /v &quot;RpcAuthnLevelPrivacyEnabled&quot; /t dword /d 0 /f1Set-ItemProperty -Path &quot;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Print&quot; -Name &quot;RpcAuthnLevelPrivacyEnabled&quot; -Value 0","categories":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/categories/Windows/"},{"name":"打印机","slug":"Windows/打印机","permalink":"https://315490.xyz/categories/Windows/%E6%89%93%E5%8D%B0%E6%9C%BA/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/tags/Windows/"},{"name":"打印机","slug":"打印机","permalink":"https://315490.xyz/tags/%E6%89%93%E5%8D%B0%E6%9C%BA/"},{"name":"Windows共享打印机","slug":"Windows共享打印机","permalink":"https://315490.xyz/tags/Windows%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA/"}]},{"title":"Windows 小技巧","slug":"windows/Windows小技巧","date":"2023-12-30T15:12:14.000Z","updated":"2023-12-30T15:12:14.000Z","comments":true,"path":"/2023/12/30/windows/Windows小技巧/","permalink":"https://315490.xyz/2023/12/30/windows/Windows%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"","text":"知道IP查询内网设备的主机名1ping -a &lt;IP地址&gt; 查询指定端口占用情况12netstat -ano | findstr &lt;端口号&gt;tasklist | findstr &lt;返回的PID&gt; 当前用户桌面壁纸位置1%UserProfile%\\AppData\\Roaming\\Microsoft\\Windows\\Themes\\CachedFiles\\ 修改文件元数据123456# 创建时间(ls file.txt).CreationTime = &quot;2038-12-31 23:59:59&quot;# 修改时间(ls file.txt).LastWriteTime = &quot;2038-12-31 23:59:59&quot;# 访问时间(ls file.txt).LastAccessTime = &quot;2038-12-31 23:59:59&quot; 关闭 Chrome 系统升级提示所有用户应用. 如果只需要当前用户生效，把 HKEY_LOCAL_MACHINE 替换为 HKEY_CURRENT_USER 1234567Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chrome] &quot;SuppressUnsupportedOSWarning&quot;=dword:1[HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Edge] &quot;SuppressUnsupportedOSWarning&quot;=dword:1 关闭 Microsoft Edge 使用推荐设置提示所有用户应用. 如果只需要当前用户生效，把 HKEY_LOCAL_MACHINE 替换为 HKEY_CURRENT_USER 1234Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Edge] &quot;ShowRecommendationsEnabled&quot;=dword:0 MacOS 安装 Windows 卡准备就绪1234Windows Registry Editor Version 5.00[HKLOCAL MACHINE\\SYSTEM\\SETUP\\SATUS\\ChildCompletion]&quot;setup.exe&quot; = dword:3 关闭 DNS 多解析组策略中文系统路径: 1计算机配置 -&gt; 管理模板 -&gt; 网络 -&gt; DNS 客户端 -&gt; 禁用智能多宿主名称解析 英文系统路径: 1Computer Configuration -&gt; Administrative Templates -&gt; Network -&gt; DNS Client -&gt; Turn Off Multicast Name Resolution windows Server取消密码复杂度1. 打开本地安全策略服务管理工具 &gt; 工具 &gt; 本地安全策略 2. 密码策略账户策略 &gt; 密码策略 &gt; 密码必须符合复杂性要求 &gt; 禁用 其中，密码最长使用期限、密码最短使用期限、密码最短使用期限（分钟）可以设置为0，表示不限制 解决Win11 24H2下网页卡屏&#x2F;卡顿&#x2F;显示残留的问题如题，最近电脑老有问题，神烦比如浏览网页，好端端的，随机的就会出现网页卡屏我明明切换到另一个标签了，显示的还是上一个标签的图像起初我以为是(显卡(因为vscode也有问题)，浏览器)的问题，后来发现其他网友在使用其他软件时也会遇到那就是微软的锅了 解决方案1. （推荐）禁用 MPO打开注册表编辑器，路径HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Dwm新建一个DWORD(32位)值，命名为OverlayTestMode，值设为5 1reg add &quot;HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Dwm&quot; /v OverlayTestMode /t REG_DWORD /d 5 2. 关闭硬件加速关了就没办法使用GPU硬件加速，导致看视频卡顿，CPU占用高，但是网页浏览正常 3. 退回23H24. 关闭浏览器设置Edge浏览器的GPU rasterization和Accelerated 2D canvas都禁用了就好了，可以试试。edge://flags/进入设置。 Windows 睡眠后，莫名唤醒使用以下命令查看最后一次唤醒的原因 1powercfg /LASTWAKE 电源按钮唤醒如果是有线连接，可能是局域网内其他设备的广播唤醒电脑。在设备管理器里找到对应网卡，右键属性，取消勾选 允许此设备唤醒计算机。如果需要 网络唤醒(WoL)功能，可以勾选 允许此设备唤醒计算机，然后勾选 只允许幻术封包唤醒计算机。 如果是无线网卡也可以试试。虽然无线网卡理论上没有这个功能，但是无线网卡也有唤醒能力。 Microsoft Edge 浏览器历史记录、收藏夹、网页登录状态丢失bug该bug是由edge游戏助手引起，只需删掉游戏助手即可解决。 删除edge游戏助手的步骤：Win+G打开xbox game bar，点击最上面的小组件菜单→小组件商店→已安装，删除edge游戏助手即可。 由于edge游戏助手在系统更新时会自动重新安装，所以在更新系统后，需要再次重复删除步骤。 如果不幸触发了该bug，不用担心，你的所有记录都没有真正的丢失。在删除edge游戏助手，确保所有edge的进程关闭后，彻底地重启edge，即可恢复所有的记录、收藏夹和网站的登录状态。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/categories/Windows/"},{"name":"小技巧","slug":"Windows/小技巧","permalink":"https://315490.xyz/categories/Windows/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/tags/Windows/"},{"name":"小技巧","slug":"小技巧","permalink":"https://315490.xyz/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"Windows Server","slug":"Windows-Server","permalink":"https://315490.xyz/tags/Windows-Server/"},{"name":"密码安全设置","slug":"密码安全设置","permalink":"https://315490.xyz/tags/%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"},{"name":"DNS","slug":"DNS","permalink":"https://315490.xyz/tags/DNS/"},{"name":"IP","slug":"IP","permalink":"https://315490.xyz/tags/IP/"},{"name":"主机名","slug":"主机名","permalink":"https://315490.xyz/tags/%E4%B8%BB%E6%9C%BA%E5%90%8D/"},{"name":"端口","slug":"端口","permalink":"https://315490.xyz/tags/%E7%AB%AF%E5%8F%A3/"},{"name":"桌面壁纸","slug":"桌面壁纸","permalink":"https://315490.xyz/tags/%E6%A1%8C%E9%9D%A2%E5%A3%81%E7%BA%B8/"},{"name":"文件元数据","slug":"文件元数据","permalink":"https://315490.xyz/tags/%E6%96%87%E4%BB%B6%E5%85%83%E6%95%B0%E6%8D%AE/"},{"name":"Chrome","slug":"Chrome","permalink":"https://315490.xyz/tags/Chrome/"},{"name":"Edge","slug":"Edge","permalink":"https://315490.xyz/tags/Edge/"}]},{"title":"Windows 快捷键","slug":"windows/冷门快捷键","date":"2023-08-25T07:40:00.000Z","updated":"2023-08-25T07:40:00.000Z","comments":true,"path":"/2023/08/25/windows/冷门快捷键/","permalink":"https://315490.xyz/2023/08/25/windows/%E5%86%B7%E9%97%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"重启图形子系统Win+Ctrl+Shift+B 按下后会有嘟一声提示。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/categories/Windows/"},{"name":"小技巧","slug":"Windows/小技巧","permalink":"https://315490.xyz/categories/Windows/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/tags/Windows/"},{"name":"小技巧","slug":"小技巧","permalink":"https://315490.xyz/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}]},{"title":"btrfs raid1转read10记录","slug":"linux/btrfs/btrfs-raid","date":"2023-05-31T01:45:49.000Z","updated":"2023-05-31T01:45:49.000Z","comments":true,"path":"/2023/05/31/linux/btrfs/btrfs-raid/","permalink":"https://315490.xyz/2023/05/31/linux/btrfs/btrfs-raid/","excerpt":"","text":"测试环境模拟我的4盘位硬盘盒，现有两块做 raid1 并且已经有数据。在新加入两块盘后组成 raid10 并不损失数据。在 VMware Workstation 创建虚拟机配置如下 创建Raid1阵列模拟我现在的磁盘状态。 12# 已有数据需要 -f 参数强制覆盖mkfs.btrfs -m raid1 -d raid1 /dev/sd&#123;b,c&#125; 写入数据，用于辨别操作后是否损坏数据。 123mount /dev/sdb /mntecho &quot;abcde&quot;&gt;/mnt/test.txtdd if=/dev/random of=/mnt/testfile bs=1M count=256 查看当前使用情况 将新加入磁盘加入阵列将磁盘加入阵列单纯的将磁盘加入阵列只是以reid1模式加入。 12# btrfs device add -f device[ device ...] path -f参数强制覆盖会损失盘上所有数据btrfs d a /dev/sd&#123;d,e&#125; /mnt 均衡磁盘btrfs将设备加入阵列后数据是不会变动的。需要重新分配。重新分配时加入转换参数将 reid1 转为 reid10.经确认数据完整。不过实际设备往往数据量大需要时间长，在转换过程中突发断电数据难保。 1btrfs balance start -dconvert=raid10 -mconvert=raid10 -sconvert=raid10 -f /mnt","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"btrfs","slug":"linux/btrfs","permalink":"https://315490.xyz/categories/linux/btrfs/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"btrfs","slug":"btrfs","permalink":"https://315490.xyz/tags/btrfs/"},{"name":"filesystem","slug":"filesystem","permalink":"https://315490.xyz/tags/filesystem/"},{"name":"raid","slug":"raid","permalink":"https://315490.xyz/tags/raid/"}]},{"title":"turtle","slug":"Python/turtle","date":"2023-02-27T04:36:25.000Z","updated":"2023-02-27T04:36:25.000Z","comments":true,"path":"/2023/02/27/Python/turtle/","permalink":"https://315490.xyz/2023/02/27/Python/turtle/","excerpt":"","text":"备忘默认画笔方向是右先设置属性, 再调用命令 画布screensize(x,y,color)设置画布大小和背景色(单词或16进制)默认 800*600 白色 setup(windowX,windowY,x,y)设置画布大小和窗口起始位置的坐标默认 800*600 (0,0) 移动forward(x) fd(x)向当前画笔方向移动x个像素长度 backward(x)向当前画笔背面移动x像素长度 pensize(px)设置画笔的宽度(像素单位) goto(x,y)turtle(画笔)移动到坐标为 (x,y) 的位置 right(x)顺时针旋转x度 left(x)逆时针旋转x度 pendown()落笔，移动时绘制图形 penup()抬笔，不绘制图形 setx(a)将当前x轴移动到a位置 sety(a)将当前y轴移动到a位置 setheading(x)设置当前朝向为x角度 speed(x)设置当前速度为x, 默认为5 效果 x的值 极快 0 快 10 正常 6 慢 3 极慢 1 shape(type)更改光标外形, 默认箭头turtle 是海龟 绘画dot(d,color)绘制一个指定直径和颜色的圆点, 颜色是可选项 circle(r,e,s)r表示半径，正值逆时针旋转，负值顺时针旋转e表示度数，绘制曲线s表示边数，可用于绘制正多边形 r是必要的; e和s参数可有可无 pencolor()设置画笔颜色 fillcolor(color)画出图形的内部填充颜色 color(1, 2)同时设置pencolor&#x3D;1, fillcolor&#x3D;2(内部的填充颜色) filling()返回当前是否在填充状态 begin_fill()准备填充图形 end_fill()填充结束(完成) hideturtle()隐藏画笔的turtle形状 showturtle()显示画笔的turtle形状 clear()清空窗口(turtle的位置和状态不会改变) reset()清空窗口，(重置turtle状态为起始状态) undo()撤销上一个动作 isvisible()返回当前turtle是否可见 stamp()复制当前图形 done()turtle中的最后一个语句 write(x [,font&#x3D;(“name”,size,”type”)])写出文本，x为文本内容，字体名称是name，大小是size，类型是type(在线执行无法执行英文或汉字属于正常现象)","categories":[{"name":"Python","slug":"Python","permalink":"https://315490.xyz/categories/Python/"},{"name":"模块","slug":"Python/模块","permalink":"https://315490.xyz/categories/Python/%E6%A8%A1%E5%9D%97/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://315490.xyz/tags/Python/"},{"name":"模块","slug":"模块","permalink":"https://315490.xyz/tags/%E6%A8%A1%E5%9D%97/"},{"name":"Turtle","slug":"Turtle","permalink":"https://315490.xyz/tags/Turtle/"}]},{"title":"wireguard代理","slug":"linux/openwrt/wireguard代理","date":"2022-12-29T13:16:55.000Z","updated":"2022-12-29T13:16:55.000Z","comments":true,"path":"/2022/12/29/linux/openwrt/wireguard代理/","permalink":"https://315490.xyz/2022/12/29/linux/openwrt/wireguard%E4%BB%A3%E7%90%86/","excerpt":"","text":"前言本教程只是实验目的，禁止用于非法用途。一切后果与本人无关。 测试环境 操作步骤在原有WireGuard隧道的基础上进行小修改即可。 路由器防火墙在WireGuard的防火墙空间上 允许转发到wan所在的空间 既可。入站、出站、转发建议全部接受。开启IP动态伪装(这个是IPv4的NAT，v6NAT需要改防火墙文件且只有fw4版本才开始支持)。添加防火墙规则(负责转发IPv6，一般来说V4 wan口默认全局NAT)。其他Linux命令差不多，要操作的表不一样。 iptables(22.03之前)nftables(22.03之后)123OpenWrt21.02.5测试没有问题# 命令 nat表 wan出站对应的链 匹配： 限制源地址 跳到MASQUERADE(自动重写地址为出站端口)ip6tables -t nat -A zone_wan_postrouting -s 10.3.3.0/24 -j MASQUERADE在luci界面添加规则，或者在命令行添加规则。命令行规则自行设置持久化。 123# OpenWrt22.03.2测试没有问题# 添加规则 在inet集fw4表的srcnat_wan链中，匹配是IPv6且iif(源网卡)是wg网卡的数据做masquerade(自动重写地址为出站端口)nft add rule inet fw4 srcnat_wan meta nfproto ipv6 iif &quot;wg&quot; masquerade 路由表如果到这里设置外围设备允许的IP地址为 0.0.0.0/0,::/0 或 ::/1, 8000::/1, 0.0.0.0/1, 128.0.0.0/1 IPv6能上网就不需要继续看了，教程结束。如果IPv6不能联网大概率是路由表的锅。IPv4的路由表是自动配置的。IPv6的路由表自动配置的可能会有问题。使用以下方法解决 1234567891011121314cat &lt;&lt;EOF &gt; /etc/hotput.d/iface/99-wireguard#!/bin/sh[ $ACTION = ifup ]||exit0# 要检测上线的接口(一般是wan)iface=&#x27;pppor-wan&#x27;[ $INTERFACE = &quot;$iface&quot; ]||exit 0logger -t WireGuard &quot;接口$iface重新上线，正在重新分配路由&quot;route=$(ip -6 route show dev $iface|head -n1|awk &#x27;&#123;print $1,$4,$5,$6,$7&#125;&#x27;)status=$(ip -6 add route $route)logger -t WireGuard &quot;IPv6路由状态：$route $status&quot;EOFchmod +x /etc/hotplug.d/iface/99-wireguardroute=$(ip -6 route show dev $iface|head -n1|awk &#x27;&#123;print $1,$4,$5,$6,$7&#125;&#x27;)ip -6 add route $route 现在IPv6应该可以正常上网了。","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"openwrt","slug":"linux/openwrt","permalink":"https://315490.xyz/categories/linux/openwrt/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"openwrt","slug":"openwrt","permalink":"https://315490.xyz/tags/openwrt/"},{"name":"wireguard","slug":"wireguard","permalink":"https://315490.xyz/tags/wireguard/"},{"name":"proxy","slug":"proxy","permalink":"https://315490.xyz/tags/proxy/"},{"name":"nat","slug":"nat","permalink":"https://315490.xyz/tags/nat/"},{"name":"route","slug":"route","permalink":"https://315490.xyz/tags/route/"}]},{"title":"WireGuard同网段建立隧道","slug":"linux/openwrt/wireguard同网段穿透","date":"2022-12-29T12:29:09.000Z","updated":"2022-12-29T12:29:09.000Z","comments":true,"path":"/2022/12/29/linux/openwrt/wireguard同网段穿透/","permalink":"https://315490.xyz/2022/12/29/linux/openwrt/wireguard%E5%90%8C%E7%BD%91%E6%AE%B5%E7%A9%BF%E9%80%8F/","excerpt":"","text":"前言这才是 VPN(虚拟局域网) 的正确用途。先根据网上的方法创建一个隧道。此为同网段NAT-to-NAT不同网段可以参考网上方案，或者忽略本方案的DHCP修改。此方案基于OpenWrt，其他Linux版本需要将配置写在WireGuard的配置文件里(网卡的上下线事件)。 测试环境路由器1：有公网IP地址，做服务器路由器2：无公网地址，服务器建设在此设备的网络下需要把对路由器1的访问转发到路由器2对应的设备上 实验步骤在此步应该已经建立起一个可以通过WireGuard互相访问的隧道 路由器1配置WireGuard虚拟网卡需要配置对端设备允许的IP地址，因为我需要访问一个IP段所以添加了 192.168.0.192/26 防火墙WireGuard虚拟网卡建议单独放一个防火墙名称随意开启IP动态伪装(NAT), 允许转发到lan，允许来自lan转发。入站、出站、转发建议全部接受。 DHCP因为两个网段的IP是一样的为了保证 一个IP对应一个设备，需要对DHCP做限制。保留一些地址给路由器下的设备使用。可以使用子网掩码分割地址本次实验我通过控制DHCP的允许的客户端数量保留 192.168.0.192/26 范围的地址供 路由器2 的设备使用。 静态路由这个步骤尤为关键, 因为我没有直接修改子网掩码，这一步做网络路由。告诉路由器192.168.0.192&#x2F;26内的IP地址在别处。如果是直接修改子网掩码的可以忽略这一步。因为对路由器来说那段地址已经不是它管的了，自然会去其他地方寻找。根据上面步骤保留的IP地址配置新建静态路由。 名称 内容 接口 WireGuard的虚拟网卡 目标 上面保留的地址，使用CIDR写法列如：IP段192.168.0.192&#x2F;26或单个地址192.168.0.254&#x2F;32 网关 下一跳地址，此处我填10.3.3.2(目标网段路由地址) 路由器2配置防火墙同路由器1配置WireGuard虚拟网卡建议单独放一个防火墙名称随意开启IP动态伪装(NAT), 允许转发到lan，允许来自lan转发。入站、出站、转发建议全部接受。因为路由器1已经开了NAT转换，所以对于路由器2来说是10.3.3.1访问了它。又因为10.3.3.1符合10.3.3.0&#x2F;24网段，所以可以接受数据包，再经过NAT后访问目的地址。目的设备也只能知道是10.3.3.1访问了它，这是这个方案的缺陷。 端口映射现在可以在 路由器1 上 直接映射 路由器2对应 192.168.0.192/26 范围内设备的端口，就像这个设备本来就在路由器1上一样(跟内网差不多)。做到这一步，在路由器1上ping路由器2(10.3.3.2)和路由器2上的对应网段的设备(192.168.0.254)应该是可以直接ping通的。","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"openwrt","slug":"linux/openwrt","permalink":"https://315490.xyz/categories/linux/openwrt/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"openwrt","slug":"openwrt","permalink":"https://315490.xyz/tags/openwrt/"},{"name":"wireguard","slug":"wireguard","permalink":"https://315490.xyz/tags/wireguard/"},{"name":"nat-to-nat","slug":"nat-to-nat","permalink":"https://315490.xyz/tags/nat-to-nat/"}]},{"title":"MySQL小知识","slug":"数据库/mysql/MySQL小知识","date":"2022-08-31T04:25:01.000Z","updated":"2023-11-09T11:45:00.000Z","comments":true,"path":"/2022/08/31/数据库/mysql/MySQL小知识/","permalink":"https://315490.xyz/2022/08/31/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E5%B0%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"前言SHOW TABLES FROM database 与以下条目等价 12use database;SHOW TABLES; 表层结构information_schema 表 注解 SCHEMATA SHOW DATABASES 命令的结果取自此表，数据库信息在这此储 TABLES SHOW TABLES 命令结果取自此表，表格信息在此存储 COLUMNS SHOW COLUMNS 命令结果取自此表，表列信息在此存储 STATISTICS SHOW INDEX 命令结果取自此表, 索引信息在此存储 等效命令show databases1SELECT SCHEMA_NAME FROM information_schema.SCHEMATA; show tables FROM database1SELECT TABLE_NAME FROM information_schema.TABLES where TABLE_SCHEMA = &#x27;database&#x27;; show columns FROM database.table1SELECT COLUMN_NAME FROM information_schema.COLMNS where TABLE_SCHEMA = &#x27;database&#x27; AND TABLE_NAME = &#x27;table&#x27;; 环境信息获取数据库数据位置1SELECT @@datadir; 数据库安装位置1SELECT @@basedir; 系统类别1SELECT @@VERSION_COMPILE_OS; MySQL版本1SELECT VERSION(); 可执行注释注意: 5位数字是低于或等于当前版本才会运行后面的命令 &#x2F;*!(数据库版本5位数字)(要执行的命令)*&#x2F;列如数据库版本5.8.17 1/*!50817SELECT VERSION();*/ 任何版本都要执行 1/*!00000SELECT VERSION();*/ 当前连接数据库的人数1SELECT CONNECTION_ID(); 当前用户信息1SHOW PROCESSLIST;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://315490.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"数据库/mysql","permalink":"https://315490.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://315490.xyz/tags/mysql/"}]},{"title":"openwrt防火墙只允许国内访问","slug":"linux/openwrt/openwrt_firewall_allow_cn","date":"2022-07-29T03:47:09.000Z","updated":"2022-07-29T03:47:09.000Z","comments":true,"path":"/2022/07/29/linux/openwrt/openwrt_firewall_allow_cn/","permalink":"https://315490.xyz/2022/07/29/linux/openwrt/openwrt_firewall_allow_cn/","excerpt":"","text":"前言由于我家是电信公网，在后台日志中常常看到来自世界各地的访问。这些IP尝试爆破我SSH服务的密码、微软远程桌面的用户名和密码，显然是一个安全隐患。为了使我的防火墙更加安全，我决定将其设置为只允许国内访问。 openwrt 22.03 版开始使用 nftables，不再使用 iptables。 openwrt 22.03.3 版本 Luci 界面支持配置 IP集 安装所需的依赖包安装 ipset, openwrt 22.03 或更新版本需要安装 iptables-nft 来兼容iptables命令。 PS: nftables 自带列表功能，不需要 ipsec。 12opkg updateopkg install ipset 配置 IP 列表ipsetnftablesLuci12345678910# 创建一个名为cnip的规则ipset create cnip hash:net# 下载国家IP段，这里以中国为例wget -P /tmp/ http://www.ipdeny.com/ipblocks/data/countries/cn.zone# 将IP段添加到cnip规则中for i in $(cat /tmp/cn.zone ); do ipset add cnip $i; done# 保存规则到配置文件中ipset save &gt; /etc/ipset.conf# 重启自动恢复ipset规则echo &quot;ipset -R &lt; /etc/ipset.conf&quot; &gt; /etc/rc.local 注意：最后有一条命令会覆盖这个文件的内容，或者手动插入 ipset -R &lt; /etc/ipset.conf 到 exit 0 命令前一行12345678910# 创建一个名为cnip的规则nft add set inet fw4 CNIP&#123;type ipv4_addr\\; flags interval\\;&#125;# 下载国家IP段，这里以中国为例wget -P /tmp/ http://www.ipdeny.com/ipblocks/data/countries/cn.zone# 将IP段添加到cnip规则中 注：有效率问题for i in $(cat /tmp/cn.zone ); do nft add element inet fw4 CNIP &#123;$i&#125;; done# 保存规则到配置文件中nft list set inet fw4 CNIP &gt; /etc/CNIP.nft# 重启自动恢复规则, firewall.user 文件可能不存在，反正能在防火墙运行时添加规则就行。echo &quot;nft -f /etc/CNIP.nft&quot; &gt;&gt; /etc/firewall.user 新安装的系统需要手动配置 firewall.user。参考以下链接或代码块。 firewall配置文件说明 123config include option path &#x27;/etc/firewall.user&#x27; option fw4_compatible 1自行准备一个cn.zone文件，内容为国家IP段。 打开网络-&gt;防火墙-&gt;IP集合 点击添加 数据包字段匹配选择IP地址 通过包括文件上传cn.zone文件，点击保存 点击保存&amp;应用 配置防火墙iptablesnftablesLuci123456789# 将规则写入防火墙的自定义规则文件中cat &lt;&lt; EOF &gt;&gt; /etc/firewall.user# 阻断端口22 3389iptables -I zone_wan_input -p tcp -m multiport --dport 22,3389 -j DROP# 允许国内访问端口iptables -I zone_wan_input -p tcp -m multiport --dport 22,3389 -m set --match-set cnip src -j ACCEPTEOF# 重启防火墙, 报错就用service firewall restartfw3 restart openwrt的防火墙Filter表中INPUT链处理所有接入的包, 其中zone_wan_input链是wan空间的INPUT链。 zone_wan_input链中可能有规则会允许所有的包通过，为保证规则的效应iptables使用插入(-I)而不是添加(-A)。1234567891011# firewall.user文件可能不存在，反正能在防火墙运行时添加规则就行cat &lt;&lt;EOF &gt;&gt; /etc/firewall.user# 创建一个由端口组成的列表nft add set inet fw4 PORT&#123;type inet_service\\; flags interval\\;&#125;# 向列表添加端口nft add element inet fw4 PORT&#123;ssh,3389&#125;# 阻止列表外的IP访问端口nft insert rule inet fw4 input_wan ip saddr != @CNIP tcp dport @PORT dropEOF# 重启防火墙, 报错就用service firewall restartfw4 restart 打开网络-&gt;防火墙-&gt;通信规则 点击添加，源区域wan，目的区域输入，把要限制的端口添加到目的端口中，操作丢弃，点击保存 点击添加，源区域wan，目的区域输入，限制的端口添加到目的端口中，操作接受，高级设置里使用IP集选择之前创建的IP集，点击保存","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"openwrt","slug":"linux/openwrt","permalink":"https://315490.xyz/categories/linux/openwrt/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://315490.xyz/tags/iptables/"},{"name":"firewall","slug":"firewall","permalink":"https://315490.xyz/tags/firewall/"},{"name":"openwrt","slug":"openwrt","permalink":"https://315490.xyz/tags/openwrt/"},{"name":"nftables","slug":"nftables","permalink":"https://315490.xyz/tags/nftables/"}]},{"title":"Linux上软件平替","slug":"linux/软件平替","date":"2022-05-27T02:54:45.000Z","updated":"2022-05-27T02:54:45.000Z","comments":true,"path":"/2022/05/27/linux/软件平替/","permalink":"https://315490.xyz/2022/05/27/linux/%E8%BD%AF%E4%BB%B6%E5%B9%B3%E6%9B%BF/","excerpt":"","text":"开源不等于免费 原软件 平替软件 Adobe Ps GIMP Adobe Pr Kdenlive 3D建模类软件 Blender 代码编辑(文本预览) Visual Studio Code Microsoft Offices 金山 WPS(非开源) 系统管理(Linux) Stacer","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"}],"tags":[{"name":"软件推荐","slug":"软件推荐","permalink":"https://315490.xyz/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"}]},{"title":"Docker手册","slug":"Docker/Docker","date":"2022-05-07T04:44:00.000Z","updated":"2022-05-06T16:00:00.000Z","comments":true,"path":"/2022/05/07/Docker/Docker/","permalink":"https://315490.xyz/2022/05/07/Docker/Docker/","excerpt":"","text":"Docker 是一个容器化的技术，它可以将应用程序分割成小的容器，并将容器连接起来，从而实现应用程序的分布式运行。 文档资料来源Docker教程https://jiajially.gitbooks.io/dockerguide/content/index.html 命令行 命令 说明 attach 执行容器内的命令 build 构建镜像 create 创建容器 commit 提交容器内的文件 cp 复制文件到容器 exec 在运行中的容器内执行程序 images 查看镜像 logs 查看容器日志 pull 拉取镜像 push 推送镜像 ps 查看当前运行的容器 port 查看容器端口 run 运行容器 rm 删除容器 rmi 删除镜像 start 启动已经停止的容器 stop 停止正在运行容器 restart 重启容器 stats 查看容器状态 search 搜索镜像 kill 杀死容器 tag 标记镜像 import 导入镜像 export 导出镜像 top 查看容器运行状态 -i 交互式操作 -t 以终端模式运行 -d 后台运行 -p 指定端口 –name 指定容器名称 –net 删除容器 -e, –env&#x3D;[] 配置环境变量 容器生命周期管理create创建容器 1docker create &lt;镜像名称&gt;[:镜像版本] [命令] [参数] 1docker create ubuntu:latest /bin/echo &quot;Hello World&quot; run创建并运行容器 1docker run &lt;镜像名称&gt;[:&lt;镜像版本&gt;] [命令] [参数] 1docker run ubuntu:latest /bin/echo &quot;Hello World&quot; exec在容器内执行程序 1docker exec -it &lt;容器 名称 或 ID&gt; &lt;命令&gt; [参数] start启动容器 1docker start &lt;容器 名称 或 ID&gt; stop停止容器 1docker stop &lt;容器 名称 或 ID&gt; restart重启容器 1docker restart &lt;容器 名称 或 ID&gt; kill杀死容器 1docker kill &lt;容器 名称 或 ID&gt; 这会强制停止容器。 rm删除容器 1docker rm &lt;容器 名称 或 ID&gt; 这将删除一个已经停止运行的容器，若容器正在运行，则将会使docker报错，停止容器再删除，或者加上-f参数强制删除（不建议）。 pause暂停容器中所有的进程 1docker pause &lt;容器 名称 或 ID&gt; unpause恢复容器中所有的进程 1docker unpause &lt;容器 名称 或 ID&gt; 容器操作ps查看正在运行的容器 1docker ps 查看所有容器 1docker ps -a 查看最新的容器 1docker ps -l inspect查看容器信息 1docker inspect &lt;容器 名称 或 ID&gt; top查看容器正在运行的进程 1docker top &lt;容器 名称 或 ID&gt; attach使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。 1docker attach &lt;容器 名称 或 ID&gt; 1docker attach ubuntu01 在命令退出时容器将自动退出,好在attach是可以带上–sig-proxy&#x3D;false来确保CTRL-D或CTRL-C不会关闭容器。 logs查看容器日志 1docker logs &lt;容器 名称 或 ID&gt; 参数 描述 -f 跟踪日志输出 –since 指定时间之后的日志输出 -t 显示日志的时间戳 –tail 指定日志输出的行数 wait等待容器停止, 然后返回容器退出代码 1docker wait &lt;容器 名称 或 ID&gt; export导出容器的镜像 1docker export &lt;容器 名称 或 ID&gt; 导出容器的镜像到文件 1docker export -o &lt;文件名&gt; &lt;容器 名称 或 ID&gt; port查看容器的端口映射 1docker port &lt;容器 名称 或 ID&gt; 容器rootfs操作commit提交更改到镜像 1docker commit &lt;容器 名称 或 ID&gt; &lt;镜像名称&gt;[:&lt;镜像版本&gt;] 参数 描述 -a 指定提交的作者 -m 指定提交的镜像描述 -p 提交时将容器暂停 提交时附带更改信息 1docker commit -m &quot;提交更改&quot; &lt;容器 名称 或 ID&gt; &lt;镜像名称&gt;[:&lt;镜像版本&gt;] cp复制文件到容器内，或容器文件内到容器外 1docker cp &lt;文件名&gt; &lt;容器 名称 或 ID&gt;:/&lt;目标路径&gt; 1docker cp &lt;容器 名称 或 ID&gt;:/&lt;源路径&gt; &lt;文件名&gt; diff查看容器内文件的差异(更改) 1docker diff &lt;容器 名称 或 ID&gt; 镜像仓库操作login登录镜像仓库 1docker login &lt;仓库地址&gt; 参数 描述 -u 指定用户名 -p 指定密码 logout退出镜像仓库 1docker logout pull获取镜像 1docker pull &lt;镜像名称&gt;[:&lt;镜像版本&gt;] 列如：获取Ubuntu最新镜像 1docker pull ubuntu:latest push推送镜像 1docker push &lt;镜像名称&gt;[:&lt;镜像版本&gt;] search搜索镜像 1docker search &lt;镜像名称&gt; 参数 描述 –automated 只显示自动构建的镜像 –no-trunc 显示完整的镜像描述 -f &lt;过滤条件&gt; 过滤指定的镜像 过滤条件参数 描述 NAME 镜像仓库源名称 DESCRIPTION 镜像描述 OFFICIAL 是否是官方镜像 stars 镜像的星级 AUTOMATED 是否是自动构建的镜像 本地镜像管理images查看本地存储的镜像 1docker images 展示完整镜像ID 1docker images --no-trunc 展示没有TAG的镜像 1docker images --filter &quot;dangling=true&quot; rmi删除镜像 1docker rmi &lt;镜像名称&gt;[:&lt;镜像版本&gt;] tag标记镜像 1docker tag &lt;镜像名称&gt;[:&lt;镜像版本&gt;] &lt;标记名称&gt;[:&lt;标记版本&gt;] build构建镜像 参数 描述 –build-arg&#x3D;[] 设置镜像创建时的变量 –cpu-shares 设置 cpu 使用权重 –cpu-period 限制 CPU CFS周期 –cpu-quota 限制 CPU CFS配额 –cpuset-cpus 指定使用的CPU id –cpuset-mems 指定使用的内存 id –disable-content-trust 忽略校验，默认开启 -f 指定要使用的Dockerfile路径 –force-rm 设置镜像过程中删除中间容器 –isolation 使用容器隔离技术 –label&#x3D;[] 设置镜像使用的元数据 -m 设置内存最大值 –memory-swap 设置Swap的最大值为内存+swap，”-1”表示不限swap –no-cache 创建镜像的过程不使用缓存 –pull 尝试去更新镜像的新版本 –quiet, -q 安静模式，成功后只输出镜像 ID –rm 设置镜像成功后删除中间容器 –shm-size 设置&#x2F;dev&#x2F;shm的大小，默认值是64M –ulimit Ulimit配置 –squash 将 Dockerfile 中所有的操作压缩为一层 –tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签 –network: 默认 default。在构建期间设置RUN指令的网络模式 history查看镜像构建历史 参数 描述 -H 以可读的格式打印镜像大小和日期，默认为true –no-trunc 显示完整的提交记录 -q 仅列出提交记录ID save保存镜像 1docker save &lt;镜像名称&gt;[:&lt;镜像版本&gt;] &gt; -o &lt;镜像文件名&gt; load加载 save 保存的镜像 1docker load -i &lt;镜像文件名&gt; 参数 描述 -i &lt;镜像文件名&gt; 镜像文件名, 代替STDIN –quiet, -q 安静模式 import从归档文件导入镜像 1docker import &lt;镜像文件名&gt;|&lt;网址&gt; &lt;自定义镜像名称&gt;[:&lt;自定义镜像版本&gt;] 参数后台运行1docker run -d &lt;镜像名称&gt;[:&lt;镜像版本&gt;] [命令] [参数] 1docker run -d --name=hello ubuntu:latest /bin/echo &quot;Hello World&quot; 查看返回信息 1234$ docker logs helloHello WorldHello World··· 让容器以后台方式运行，并不是加一个 -d 参数就可以，命令行COMMAND所执行的动作必须为持续运行的状态。 前台运行Docker会启动这个container，同时将当前的命令行窗口挂载到container的标准输入，标准输出和标准错误中。也就是container中所有的输出，你都可以再当前窗口中查看到。甚至docker可以虚拟出一个TTY窗口，来执行信号中断。 1docker run -it &lt;镜像名称&gt;[:&lt;镜像版本&gt;] &lt;命令&gt; [参数] 如果在执行run命令时没有指定-a，那么docker默认会挂载所有标准数据流，包括输入输出和错误。你可以特别指定挂载哪个标准流。 1docker run -a stdin -a stdout -it &lt;镜像名称&gt;[:&lt;镜像版本&gt;] [命令] [参数] 容器命名给container 命名有三种方式： 使用UUID长命 (“f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778”)，在创建容器时返回的id就是这个。 使用UUID短命令(“f78375b1c487”)，当执行查询时，查到的dockerID就是这个。 使用 “–name&#x3D;evil_ptolemy” ,若不加此指令，docker会自动给新创建出来的容器分配一个唯一的name 容器退出后清除Clean up (–rm) 指在容器运行完之后自动清除 容器数据卷-v|–volume: 挂载一个文件或目录到指定容器中去，实现容器中数据持久化。“–volume&#x3D;&lt;本地目录&gt;:&lt;容器目录&gt;” 发现容器中已经成功挂载数据卷，但是如果你对系统是CentoOS7系统，你会发现，无法访问test，说明权限不够，是因为CentOS7中的安全模块selinux把权限禁掉了，所以要在运行的时候加上特权：”–privileged&#x3D;true” 端口映射-p|–publish: 端口映射，容器内部的端口可以映射到外部的端口。“–publish&#x3D;&lt;主机端口&gt;[&#x2F;&lt;协议&gt;]:&lt;容器端口&gt;[&#x2F;&lt;协议&gt;]”“–publish&#x3D;&lt;主机IP&gt;:&lt;主机端口&gt;:&lt;容器端口&gt;”-P|–publish-all: 允许容器内部的所有端口都映射到外部的端口。 容器网络–net: 指定容器运行的网络。“–net&#x3D;&lt;网络名称&gt;” 类型 描述 bridge 桥接网络 host 主机网络 none 无网络 container:&lt;容器名称或ID&gt; 使用已有容器的网络配置 容器主机名-h|–hostname: 指定容器的主机名。 容器DNS-dns: 指定容器的DNS服务器。","categories":[{"name":"Docker","slug":"Docker","permalink":"https://315490.xyz/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://315490.xyz/tags/Docker/"}]},{"title":"Base64编码","slug":"加密算法/Base64","date":"2022-04-24T07:50:46.000Z","updated":"2023-11-09T11:45:00.000Z","comments":true,"path":"/2022/04/24/加密算法/Base64/","permalink":"https://315490.xyz/2022/04/24/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/Base64/","excerpt":"","text":"Base64不是加密算法, 是一种编码 特征12var encode = Base64.encode(&quot;原文&quot;); //加密var decode = Base64.decode(encode); //解密 使用 A-Z，a-z，0-9，+，/ 64个字符表示数据末尾使用=补位，补位不超过两个","categories":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"编码","slug":"编码","permalink":"https://315490.xyz/tags/%E7%BC%96%E7%A0%81/"},{"name":"Base64","slug":"Base64","permalink":"https://315490.xyz/tags/Base64/"}]},{"title":"RC4","slug":"加密算法/RC4","date":"2022-04-24T07:14:19.000Z","updated":"2024-08-25T08:07:00.000Z","comments":true,"path":"/2022/04/24/加密算法/RC4/","permalink":"https://315490.xyz/2022/04/24/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/RC4/","excerpt":"","text":"RC4是对称加密算法 特征无key也能工作key内容重复不影响结果，比如123与123123加密结果一致加密后为二进制，常使用base64编码","categories":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"RC4","slug":"RC4","permalink":"https://315490.xyz/tags/RC4/"}]},{"title":"RSA","slug":"加密算法/RSA","date":"2022-04-24T07:14:19.000Z","updated":"2024-08-25T08:02:00.000Z","comments":true,"path":"/2022/04/24/加密算法/RSA/","permalink":"https://315490.xyz/2022/04/24/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/RSA/","excerpt":"","text":"RSA非对称加密公钥加密, 私钥解密 特征JS库名称为JSEncrypt,常见文件名为jsencrypt.js 12345678//加密var encrypt = new JSEncrypt();encrypt.setPublicKey(&quot;公钥&quot;);var encrypted = encrypt.encrype(&#x27;原文&#x27;);//加密//解密var decrypt = new JSEncrypt();decrypt.setPrivateKey(&quot;私钥&quot;);var uncrypted = decrypt.decrypt(encrypted);//解密 加密后密文与Base64特征类似，密文末尾为因为补位常为==。通常密钥非常的长。","categories":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"RSA","slug":"RSA","permalink":"https://315490.xyz/tags/RSA/"}]},{"title":"AES/DES","slug":"加密算法/AES-DES","date":"2022-04-24T06:00:26.000Z","updated":"2024-08-24T16:00:00.000Z","comments":true,"path":"/2022/04/24/加密算法/AES-DES/","permalink":"https://315490.xyz/2022/04/24/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/AES-DES/","excerpt":"","text":"AES&#x2F;DES是对称加密算法 特征JS库名称为CryptoJS，常见文件名crypyo-js.js 12345678910var Key = &#x27;12345678&#x27; //密钥var Msg = &#x27;WoW&#x27; //原文var encrypt = CryptoJs.DES.encrypt(Msg, CryptoJs.enc.Utf8.parse(Key),&#123; mode: CryptoJs.mode.ECB padding: CryptoJS.pad.Pkcs7&#125;).toString(); //加密var decrypt = CryptoJS.DES.decrypt(encrypt,CryptoJs.enc.Utf8.parse(Key),&#123; mode: CryptoJs.mode.ECB padding: CryptoJS.pad.Pkcs7&#125;).toString(CryptoJS.enc.Utf8); //解密 AESDES加密后密文长度是16的整数倍 AES类型 密钥或IV位数 AES-128 16 bytes AES-192 24 bytes AES-256 32 bytes 加密后密文长度是8的整数倍 加密后为二进制，常使用base64编码padding填充模式常见值为CryptoJS.pad.Pkcs7 在二进制逆向中，可以通过AES加密矩阵判断程序是否使用AES加密算法。 破解方法暴力破解使用John或HashCat DES的猜测的密钥数量为 2密钥位数 位","categories":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"AES","slug":"AES","permalink":"https://315490.xyz/tags/AES/"},{"name":"DES","slug":"DES","permalink":"https://315490.xyz/tags/DES/"}]},{"title":"MD5算法","slug":"hash/md5","date":"2022-04-24T05:45:26.000Z","updated":"2022-04-24T05:45:26.000Z","comments":true,"path":"/2022/04/24/hash/md5/","permalink":"https://315490.xyz/2022/04/24/hash/md5/","excerpt":"","text":"MD5是数据摘要算法 特征JS库名称为MD5,常见文件名为md5.js 1var hashCode = md5(&quot;原文&quot;); 128位（16字节）的hash值，固定长度（32或64位）一个数据的MD5值是唯一的一般为 0-9 和 a-f(不区分大小写) 组成 破解方法暴力破解使用John或HashCat一般无需破解，大部分场景直接使用密文即可。","categories":[{"name":"hash","slug":"hash","permalink":"https://315490.xyz/categories/hash/"}],"tags":[{"name":"hash","slug":"hash","permalink":"https://315490.xyz/tags/hash/"},{"name":"md5","slug":"md5","permalink":"https://315490.xyz/tags/md5/"}]},{"title":"iptables 实现正向代理/端口转发/端口中继","slug":"linux/iptables/port_proxy","date":"2022-03-22T05:59:56.000Z","updated":"2022-03-22T05:59:56.000Z","comments":true,"path":"/2022/03/22/linux/iptables/port_proxy/","permalink":"https://315490.xyz/2022/03/22/linux/iptables/port_proxy/","excerpt":"","text":"命令1234iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000 -j DNAT --to-destination 1.1.1.1:30000iptables -t nat -A PREROUTING -p udp -m udp --dport 10000 -j DNAT --to-destination 1.1.1.1:30000iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 30000 -j SNAT --to-source 192.168.0.1iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 30000 -j SNAT --to-source 192.168.0.1 不同端口 端口转发将本地服务器(中转服务器 192.168.0.1 )的 10000 端口转发至目标IP(被中转服务器)为 1.1.1.1 的 30000 端口","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"iptables","slug":"linux/iptables","permalink":"https://315490.xyz/categories/linux/iptables/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"iptables","slug":"iptables","permalink":"https://315490.xyz/tags/iptables/"},{"name":"firewall","slug":"firewall","permalink":"https://315490.xyz/tags/firewall/"}]},{"title":"交换机VLAN Tag","slug":"cisco/switch/Vlan_Tag","date":"2022-02-18T16:00:00.000Z","updated":"2022-02-18T16:00:00.000Z","comments":true,"path":"/2022/02/18/cisco/switch/Vlan_Tag/","permalink":"https://315490.xyz/2022/02/18/cisco/switch/Vlan_Tag/","excerpt":"","text":"介绍VLAN Trunk (虚拟局域网中继技术)作用是让连接在不同交换机上的相同VLAN中的主机互通。 一般来说，交换机的一个端口只能承载单个VLAN的流量，如果希望一个端口承载多个VLAN 的流量，管理员就需要在交换机上使用干道（Trunk）技术。 作用如果交换机 1 的VLAN1 中的机器要访问交换机 2 的VLAN1中的，我们可以把两台交换机的级联端口设置为Trunk端口，这样，当交换机把数据包从级联口发出去的时候，会在数据包中做一个标记（TAG），以使其它交换机识别该数据包属于哪一个VLAN，这样，其它交换机收到这样一个数据包后，只会将该数据包转发到标记中指定的VLAN，从而完成了跨越交换机的VLAN内部数据传输。 Trunk运用的2种协议802.1QISL（Inter-Switch Link 交换机间链路）基本标准的IEEE协议，属业界标准。802.1Q是在不破坏原数据帧的情况下在中间插入了区分Vlan的信息。 802.1q_百度百科https://baike.baidu.com/item/802.1qCisco专有的Trunk封装方式。ISL相当于在外面再打了一层包.在原数据帧的头尾都加了东西。 ISL_百度百科https://baike.baidu.com/item/ISL 不同部分因为封装的形式不同导致ISL与没有做ISL封装的普通数据帧无法识别，无法通信，而802.1Q没有破坏原数据帧结构，所以802.1Q可以与没有做Trunk封装的标准数据帧兼容，正常通信。 结论802.1Q比ISL好用。所以尽可能的使用802.1Q封装。而且ISL的私有性也决定了它使用的会比标准少。 范列交换机间使用VLAN划分3个虚拟局域网： 1（交换机默认VLAN），2，3。要求交换机将网口设置为Trunk模式后不影响Trunk端口的无VLAN Tag通信。 列如：交换机1配置： eth0 eth1 eth2 eth3 vlan1 No tag No Tag OFF OFF vlan2 Tag OFF No Tag OFF vlan3 Tag OFF OFF No Tag 交换机2配置： eth0 eth1 eth2 eth3 vlan1 No tag OFF OFF No TAG vlan2 Tag No Tag OFF OFF vlan3 Tag OFF No Tag OFF VLAN中的设备： VLAN1VLAN2VLAN3交换机1的eth0，eth1交换机2的eth0，eth3交换机1的eth2交换机2的eth1交换机1的eth3交换机2的eth2 其中eth0即做VLAN Trunk端口又做普通交换机端口 Trunk: 在单条物理链路上承载多个VLAN的流量。一般用在交换机与交换机之间。 默认VLAN：交换机默认所有端口都是VLAN0（无TAG）","categories":[{"name":"思科","slug":"思科","permalink":"https://315490.xyz/categories/%E6%80%9D%E7%A7%91/"},{"name":"交换机","slug":"思科/交换机","permalink":"https://315490.xyz/categories/%E6%80%9D%E7%A7%91/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"}],"tags":[{"name":"思科","slug":"思科","permalink":"https://315490.xyz/tags/%E6%80%9D%E7%A7%91/"},{"name":"交换机","slug":"交换机","permalink":"https://315490.xyz/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"},{"name":"VLAN Tagging","slug":"VLAN-Tagging","permalink":"https://315490.xyz/tags/VLAN-Tagging/"},{"name":"VLAN Trunk","slug":"VLAN-Trunk","permalink":"https://315490.xyz/tags/VLAN-Trunk/"},{"name":"虚拟局域网中继技术","slug":"虚拟局域网中继技术","permalink":"https://315490.xyz/tags/%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E7%BB%A7%E6%8A%80%E6%9C%AF/"},{"name":"IEEE 802.1q","slug":"IEEE-802-1q","permalink":"https://315490.xyz/tags/IEEE-802-1q/"}]},{"title":"aircrack-ng","slug":"linux/kali_linux/aircrack-ng","date":"2022-01-19T16:00:00.000Z","updated":"2022-01-19T16:00:00.000Z","comments":true,"path":"/2022/01/19/linux/kali_linux/aircrack-ng/","permalink":"https://315490.xyz/2022/01/19/linux/kali_linux/aircrack-ng/","excerpt":"","text":"实列设置无线网卡为监听模式12airmon-ng start wlan0 # 启动监听模式airmon-ng stop wlan0mon # 停止监听模式 wlan0为对应无线网卡，成功启动后网卡名称会在原名称后加mon 监听网络获取周围网络信息1airodump-ng wlan0mon BSSID(Basic Service SetIdentifier): AP 的 MAC 地址。PWR(Power): 信号强度。Beacons: AP 发出的通告编号,每个接入点(AP)在最低速率(1M)时差不多每秒会发送 10 个左右的 beacon,所以它们能在很远的地方就被发现。#Data:当前数据传输量。#&#x2F;s:过去 10 秒钟内每秒捕获数据分组的数量。CH(Channel): AP 所在的频道。MB: AP 的最大传输速度。MB&#x3D;11 &#x3D;&gt; 802.11b,MB&#x3D;22 &#x3D;&gt; 802.11b+, MB&gt;22 &#x3D;&gt; 802.11g。后面带.的表示短封包标头,处理速度快,更利于破解。ENC(Encryption): 使用的加密算法体系。CIPHER: 检测到的加密算法。#这个和 ENC 的区别我确实不明白,有没有知道的朋友可以告诉我。AUTH(Authority): 认证方式。ESSID(The Extended Service Set Identifier): AP 的名称。 开始定点监听1airodump-ng --bssid BSSID地址 -c 信道 -w 文件保存位置 wlan0mon 断开一个客户端连接1aireplay-ng -0 次数 -a BSSID地址 -c 客户端地址 wlan0mon 使用如上命令辅助握手包抓取","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"kali","slug":"linux/kali","permalink":"https://315490.xyz/categories/linux/kali/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"kali_tools","slug":"kali-tools","permalink":"https://315490.xyz/tags/kali-tools/"}]},{"title":"Nmap","slug":"linux/kali_linux/nmap","date":"2022-01-19T16:00:00.000Z","updated":"2022-01-19T16:00:00.000Z","comments":true,"path":"/2022/01/19/linux/kali_linux/nmap/","permalink":"https://315490.xyz/2022/01/19/linux/kali_linux/nmap/","excerpt":"","text":"参数1nmap [参数] [主机名/IP/CIDR] root用户无参数默认-sS扫描，普通用户默认-sT扫描 -sS TCP SYN扫描 -sU UDP 扫描 -p 1-65535 指定端口扫描,起始和结束将被忽略 -v 显示扫描过程 -F 快速扫描 -Pn 禁止ping的服务器扫描，跳过主机发现，默认主机存在 -A 全面扫描，显示 -sV 和 -O 信息 -sV 扫描服务&#x2F;版本信息 -O 操作系统扫描 -iL 文件 指定存有IP的文件 端口状态 open 打开 close 关闭 filterde 被限制，比如防火墙拦截","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"kali","slug":"linux/kali","permalink":"https://315490.xyz/categories/linux/kali/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"kali_tools","slug":"kali-tools","permalink":"https://315490.xyz/tags/kali-tools/"}]},{"title":"sqlmap","slug":"linux/kali_linux/sqlmap","date":"2022-01-19T16:00:00.000Z","updated":"2022-01-19T16:00:00.000Z","comments":true,"path":"/2022/01/19/linux/kali_linux/sqlmap/","permalink":"https://315490.xyz/2022/01/19/linux/kali_linux/sqlmap/","excerpt":"","text":"介绍sqlmap是一个sql漏洞扫描和注入工具 参数 参数 作用 -v&#x2F;–version 显示当前sqlmap版本 -u URL&#x2F;–url&#x3D;URL sql注入检测 -d 参数 直接连接数据库 -m 文件 从多行文本文件里读取多个目标 –data&#x3D;“DATA” 要传递的POST参数，列：“id&#x3D;1” –cookie&#x3D;“COOKIE” 要传递的cookie，列：“PHPSESSID&#x3D;a8d127e…..” -f&#x2F;–fingerprint 返回数据库指纹 -b&#x2F;–banner 返回数据库banner 实列sqlmap直接连接数据库1234# 服务型sqlmap -d &quot;mysql://USER:PASSWORD@DBMS_IP:DBMS_PORT/DATABASE_NAME&quot; 其他参数# 文件型sqlmap -d &quot;DBMS://DATABASE_FILEPATH&quot; 其他参数","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"kali","slug":"linux/kali","permalink":"https://315490.xyz/categories/linux/kali/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"kali_tools","slug":"kali-tools","permalink":"https://315490.xyz/tags/kali-tools/"}]},{"title":"wafw00f","slug":"linux/kali_linux/wafw00f","date":"2022-01-19T16:00:00.000Z","updated":"2022-01-19T16:00:00.000Z","comments":true,"path":"/2022/01/19/linux/kali_linux/wafw00f/","permalink":"https://315490.xyz/2022/01/19/linux/kali_linux/wafw00f/","excerpt":"","text":"介绍识别web防火墙程序 使用方法1wafw00f 目标地址","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"kali","slug":"linux/kali","permalink":"https://315490.xyz/categories/linux/kali/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"kali_tools","slug":"kali-tools","permalink":"https://315490.xyz/tags/kali-tools/"}]},{"title":"WPscan","slug":"linux/kali_linux/wpscan","date":"2022-01-19T16:00:00.000Z","updated":"2022-01-19T16:00:00.000Z","comments":true,"path":"/2022/01/19/linux/kali_linux/wpscan/","permalink":"https://315490.xyz/2022/01/19/linux/kali_linux/wpscan/","excerpt":"","text":"介绍Wordpress专用扫描器 参数 参数 用途 –api-token 添加apikey扫描更详细，官网注册 –url 后面加要扫描的站点 -e&#x2F;–enumerate 枚举 u 用户名 p 枚举插件 ap 枚举所有插件 vp 枚举有漏洞的插件 t 枚举主题 at 枚举所有主题 vt 枚举有漏洞的主题 -w&#x2F;–wordlist 后面加字典 -U&#x2F;–username 指定用户 –update 更新漏洞数据库 -o 导出结果到文件 实例扫描站点1wpscan --url http://localhost/wordpress 对主题进行扫描1wpscan -u http://localhost/wordpress/ -e t 扫描主题存在的漏洞1wpscan -u http://localhost/wordperss -e vt 扫描已安装的插件1wpscan -u http://localhost/wordperss -e p 枚举用户1wpscan -u http://xxx -e u 暴力破解1wpscan -u http://xxx -w 密码字典 -U 用户名或用户字典","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"kali","slug":"linux/kali","permalink":"https://315490.xyz/categories/linux/kali/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"kali_tools","slug":"kali-tools","permalink":"https://315490.xyz/tags/kali-tools/"}]},{"title":"SSH","slug":"linux/command/SSH","date":"2021-03-21T16:00:00.000Z","updated":"2021-03-21T16:00:00.000Z","comments":true,"path":"/2021/03/21/linux/command/SSH/","permalink":"https://315490.xyz/2021/03/21/linux/command/SSH/","excerpt":"","text":"ssh 用于登录远程主机, 并且在远程主机上执行命令。 使用方法1234567ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address] [-c cipher_spec] [-D [bind_address:]port] [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file] [-J [user@]host[:port]] [-L address] [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port] [-Q query_option] [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]] destination [command] 参数 参数 解释 -a 禁止转发认证代理的连接. -A 允许转发认证代理的连接. 可以在配置文件中对每个主机单独设定这个参数.代理转发须谨慎. 某些用户能够在远程主机上绕过文件访问权限 (由于代理的 UNIX 域 socket), 他们可以通过转发的连接访问本地代理. 攻击者不可能从代理获得密钥内容, 但是他们能够操作这些密钥, 利用加载到代理上 的身份信息通过认证. -b bind_address 在拥有多个接口或地址别名的机器上, 指定收发接口. -c blowfish|3des|des 选择加密会话的密码术. 3des 是默认算法. 3des (triple-des) 用三支不同的密钥做加密-解密-加密三次运算, 被认为比较可靠. blowfish 是一种快速的分组加密术(block cipher), 非常安全, 而且速度比 3des 快的多. des 仅支持 客户端, 目的是能够和老式的不支持 3des 的协议第一版互操作. 由于其密码算法上的弱点, 强烈建议避免使用. -c cipher_spec 另外, 对于协议第二版, 这里可以指定一组用逗号隔开, 按优先顺序排列的密码术. 详见 Ciphers -e ch|^ch|none 设置 pty 会话的 escape 字符 (默认字符: “~” ) . escape 字符只在行首有效, escape 字符后面跟一个点 (“.” ) 表示结束连接, 跟一个 control-Z 表示挂起连接(suspend), 跟 escape 字符自己 表示输出这个字符. 把这个字符设为 &#96;&#96;none 则禁止 escape 功能, 使会话完全透明. -f 要求 在执行命令前退至后台. 它用于当 准备询问口令或密语, 但是用户希望它在后台进行. 该选项隐含了 -n 选项. 在远端机器上启动 X11 程序的推荐手法就是类似于 ssh -f host xterm 的命令. -g 允许远端主机连接本地转发的端口. -i identity_file 指定一个 RSA 或 DSA 认证所需的身份(私钥)文件. 默认文件是协议第一版的 $HOME&#x2F;.ssh&#x2F;identity 以及协议第二版的 $HOME&#x2F;.ssh&#x2F;id_rsa 和 $HOME&#x2F;.ssh&#x2F;id_dsa 文件. 也可以在配置文件中对每个主机单独指定身份文件. 可以同时使用多个 -i 选项 (也可以在配置文件中指定多个身份文件). -I smartcard_device 指定智能卡(smartcard)设备. 参数是设备文件, 能够用它和智能卡通信, 智能卡里面存储了用户的 RSA 私钥. -k 禁止转发 Kerberos 门票和 AFS 令牌. 可以在配置文件中对每个主机单独设定这个参数. -l login_name 指定登录远程主机的用户. 可以在配置文件中对每个主机单独设定这个参数. -m mac_spec 另外, 对于协议第二版, 这里可以指定一组用逗号隔开, 按优先顺序排列的 MAC(消息验证码)算法 (message authentication code). 详情以 MACs 为关键字查询. -n 把 stdin 重定向到 &#x2F;dev&#x2F;null (实际上防止从 stdin 读取数据). 在后台运行时一定会用到这个选项. 它的常用技巧是远程运行 X11 程序. 例如, ssh -n shadows.cs.hut.fi emacs 将会在 shadows.cs.hut.fi 上启动 emacs, 同时自动在加密通道中转发 X11 连接. 在后台运行. (但是如果 要求口令或密语, 这种方式就无法工作; 参见 -f 选项.) -N 不执行远程命令. 用于转发端口. (仅限协议第二版) -o option 可以在这里给出某些选项, 格式和配置文件中的格式一样. 它用来设置那些没有命令行开关的选项. -p port 指定远程主机的端口. 可以在配置文件中对每个主机单独设定这个参数. -q 安静模式. 消除所有的警告和诊断信息. -s 请求远程系统激活一个子系统. 子系统是 SSH2 协议的一个特性, 能够协助 其他应用程序(如 sftp)把SSH用做安全通路. 子系统通过远程命令指定. -t 强制分配伪终端. 可以在远程机器上执行任何全屏幕(screen-based)程序, 所以非常有用, 例如菜单服务. 并联的 -t 选项强制分配终端, 即使 没有本地终端. -T 禁止分配伪终端. -v 冗详模式. 使 打印关于运行情况的调试信息. 在调试连接, 认证和配置问题时非常有用. 并联的 -v 选项能够增加冗详程度. 最多为三个. -x 禁止 X11 转发. -X 允许 X11 转发. 可以在配置文件中对每个主机单独设定这个参数.应该谨慎使用 X11 转发. 如果用户在远程主机上能够绕过文件访问权限 (根据用户的X授权数据库), 他就可以通过转发的连接访问本地 X11 显示器. 攻击者可以据此采取行动, 如监视键盘输入等. -C 要求进行数据压缩 (包括 stdin, stdout, stderr 以及转发 X11 和 TCP&#x2F;IP 连接 的数据). 压缩算法和 gzip(1) 的一样, 协议第一版中, 压缩级别 ‘level’ 用 CompressionLevel 选项控制. 压缩技术在 modem 线路或其他慢速连接上很有用, 但是在高速网络上反而 可能降低速度. 可以在配置文件中对每个主机单独设定这个参数. 另见 Compression 选项. -F configfile 指定一个用户级配置文件. 如果在命令行上指定了配置文件, 系统级配置文件 (&#x2F;etc&#x2F;ssh&#x2F;ssh_config ) 将被忽略. 默认的用户级配置文件是 $HOME&#x2F;.ssh&#x2F;config -L port:host:hostport 将本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port&#x2F;host&#x2F;hostport -R [remote:]port:localhost:localport 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转发. 只有用 root 登录远程主机 才能转发特权端口. IPv6 地址用另一种格式说明: port&#x2F;host&#x2F;hostport -D port 指定一个本地机器动态的应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议(现在是socks5), 将充当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发. -1 强制 只使用协议第一版. -2 强制 只使用协议第二版. -4 强制 只使用 IPv4 地址. -6 强制 只使用 IPv6 地址. -J [user@]host[:port] 使用跳板机 演示将远程主机的一个端口映射到本地环境PC1: 10.0.0.1PC2: 10.0.0.2PC3: 20.0.0.1通过 PC3 运行ssh连接 PC1 将 PC2 的 80 映射到 PC3 本地端口 8080 命令1ssh -TnNL 8080:10.0.0.2:80 root@10.0.0.1 访问 PC3 端口 8080 就会转发到 PC2 的 80 端口 将本地主机端口映射到远程主机环境PC1: 10.0.0.1PC2: 10.0.0.2 通过 PC2 运行ssh将 PC2 的 80 映射到 PC1 8080将 PC1 的 8080 端口转发到 PC2 的 80 端口 命令1ssh -nNTR 8080:127.0.0.1:80 root@10.0.0.1 访问 PC1 端口 8080 就会转发到 PC2 的 80 端口 创建socks代理命令1ssh -TnND 1080 root@10.0.0.1 在 本地 1080 端口启动一个 socks5 服务，通过 本地 socks5 代理的数据会通过 ssh 链接先发送给 远程主机 ，再从 远程主机 转出。","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"command","slug":"linux/command","permalink":"https://315490.xyz/categories/linux/command/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"ssh","slug":"ssh","permalink":"https://315490.xyz/tags/ssh/"}]},{"title":"man添加中文语言包","slug":"linux/man添加中文语言包","date":"2021-01-19T16:00:00.000Z","updated":"2021-01-19T16:00:00.000Z","comments":true,"path":"/2021/01/19/linux/man添加中文语言包/","permalink":"https://315490.xyz/2021/01/19/linux/man%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E8%AF%AD%E8%A8%80%E5%8C%85/","excerpt":"","text":"man是Linux下命令帮助文档集锦，默认语言是英语。需要安装中文包以显示中文。 安装Ubuntu&DebianArch Linux&ManjaroCentos1sudo apt-get install manpages-zh1sudo pacman -S man-pages-zh_CN1sudo yum install man-pages-zh-CN.noarch","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"language","slug":"language","permalink":"https://315490.xyz/tags/language/"},{"name":"man","slug":"man","permalink":"https://315490.xyz/tags/man/"}]},{"title":"Linux修改默认语言为中文","slug":"linux/将系统语言设置为中文","date":"2021-01-19T16:00:00.000Z","updated":"2021-01-19T16:00:00.000Z","comments":true,"path":"/2021/01/19/linux/将系统语言设置为中文/","permalink":"https://315490.xyz/2021/01/19/linux/%E5%B0%86%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%AD%E6%96%87/","excerpt":"","text":"配置localesUbuntu&DebianArch Lunux1sudo dpkg-reconfigure locales取消/etc/locale-gen文件中#zh_CN.UTF-8 UTF-8前的#注释，接着执行locale-gen生成locale信息。 12sudo nano /etc/locale-gensudo locale-gen 创建locale.conf，设置LANG变量。本教程中是LANG=zh_CN.UTF-8 1sudo echo &quot;LANG=zh_CN.UTF-8&quot; &gt; /etc/locale.conf #bash会自动创建文件 安装中文字体如果遇到中文变成乱码或方块等问题，使用以下命令安装中文字体。 ArchLinuxDebian1sudo pacman -S wqy-zenhei1sudo apt-get install fonts-wqy-zenhei","categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"language","slug":"language","permalink":"https://315490.xyz/tags/language/"}]},{"title":"Android下MySql无法启动解决方案","slug":"android/android_mysql无法启动解决方案","date":"2019-12-31T16:00:00.000Z","updated":"2019-12-31T16:00:00.000Z","comments":true,"path":"/2019/12/31/android/android_mysql无法启动解决方案/","permalink":"https://315490.xyz/2019/12/31/android/android_mysql%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"前言由于安卓系统对Linux内核的修改，在使用手机搭建服务器的时候可能会遇到Mysql无法启动的情况 (Mariadb也是)。 这可能是因为安卓内核安全机制, 将用户加入aid_inet用户组才可以联网. 数据库因为没有网络权限而报错, 进而导致无法启动 解决方案在终端输入 1usermod -a -G aid_inet 数据库的用户名 或者重新编译内核, 关闭安全相关选项.(这个偏麻烦一些,而且手机厂商一般不公布内核源码) 同理PHP无网络权限也可以试试这个方案.","categories":[{"name":"android","slug":"android","permalink":"https://315490.xyz/categories/android/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"android","slug":"android","permalink":"https://315490.xyz/tags/android/"},{"name":"server","slug":"server","permalink":"https://315490.xyz/tags/server/"},{"name":"mysql","slug":"mysql","permalink":"https://315490.xyz/tags/mysql/"}]},{"title":"Android开机自启动ADB服务和开启ADB WiFi","slug":"android/安卓开机自启adb-wifi","date":"2019-12-31T16:00:00.000Z","updated":"2019-12-31T16:00:00.000Z","comments":true,"path":"/2019/12/31/android/安卓开机自启adb-wifi/","permalink":"https://315490.xyz/2019/12/31/android/%E5%AE%89%E5%8D%93%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AFadb-wifi/","excerpt":"","text":"编辑 /system/build.prop 往文件写入以下代码即可 1234# 开启adb wifiservice.adb.tcp.port=5555# 开启adbpersist.service.adb.enable=1","categories":[{"name":"android","slug":"android","permalink":"https://315490.xyz/categories/android/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"android","slug":"android","permalink":"https://315490.xyz/tags/android/"},{"name":"adb","slug":"adb","permalink":"https://315490.xyz/tags/adb/"}]}],"categories":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/categories/linux/"},{"name":"locale","slug":"linux/locale","permalink":"https://315490.xyz/categories/linux/locale/"},{"name":"sqsrq","slug":"linux/sqsrq","permalink":"https://315490.xyz/categories/linux/sqsrq/"},{"name":"Android","slug":"Android","permalink":"https://315490.xyz/categories/Android/"},{"name":"优化","slug":"Android/优化","permalink":"https://315490.xyz/categories/Android/%E4%BC%98%E5%8C%96/"},{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/categories/Windows/"},{"name":"虚拟化","slug":"Windows/虚拟化","permalink":"https://315490.xyz/categories/Windows/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"command","slug":"linux/command","permalink":"https://315490.xyz/categories/linux/command/"},{"name":"openwrt","slug":"linux/openwrt","permalink":"https://315490.xyz/categories/linux/openwrt/"},{"name":"小技巧","slug":"Windows/小技巧","permalink":"https://315490.xyz/categories/Windows/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"打印机","slug":"Windows/打印机","permalink":"https://315490.xyz/categories/Windows/%E6%89%93%E5%8D%B0%E6%9C%BA/"},{"name":"btrfs","slug":"linux/btrfs","permalink":"https://315490.xyz/categories/linux/btrfs/"},{"name":"Python","slug":"Python","permalink":"https://315490.xyz/categories/Python/"},{"name":"模块","slug":"Python/模块","permalink":"https://315490.xyz/categories/Python/%E6%A8%A1%E5%9D%97/"},{"name":"数据库","slug":"数据库","permalink":"https://315490.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"数据库/mysql","permalink":"https://315490.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/"},{"name":"Docker","slug":"Docker","permalink":"https://315490.xyz/categories/Docker/"},{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"hash","slug":"hash","permalink":"https://315490.xyz/categories/hash/"},{"name":"iptables","slug":"linux/iptables","permalink":"https://315490.xyz/categories/linux/iptables/"},{"name":"思科","slug":"思科","permalink":"https://315490.xyz/categories/%E6%80%9D%E7%A7%91/"},{"name":"交换机","slug":"思科/交换机","permalink":"https://315490.xyz/categories/%E6%80%9D%E7%A7%91/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"},{"name":"kali","slug":"linux/kali","permalink":"https://315490.xyz/categories/linux/kali/"},{"name":"android","slug":"android","permalink":"https://315490.xyz/categories/android/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://315490.xyz/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://315490.xyz/tags/ubuntu/"},{"name":"locale","slug":"locale","permalink":"https://315490.xyz/tags/locale/"},{"name":"sysrq","slug":"sysrq","permalink":"https://315490.xyz/tags/sysrq/"},{"name":"Android","slug":"Android","permalink":"https://315490.xyz/tags/Android/"},{"name":"优化","slug":"优化","permalink":"https://315490.xyz/tags/%E4%BC%98%E5%8C%96/"},{"name":"dex2oat","slug":"dex2oat","permalink":"https://315490.xyz/tags/dex2oat/"},{"name":"Windows","slug":"Windows","permalink":"https://315490.xyz/tags/Windows/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://315490.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"虚拟机平台","slug":"虚拟机平台","permalink":"https://315490.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B9%B3%E5%8F%B0/"},{"name":"HyperV","slug":"HyperV","permalink":"https://315490.xyz/tags/HyperV/"},{"name":"dd","slug":"dd","permalink":"https://315490.xyz/tags/dd/"},{"name":"mount","slug":"mount","permalink":"https://315490.xyz/tags/mount/"},{"name":"loop","slug":"loop","permalink":"https://315490.xyz/tags/loop/"},{"name":"losetup","slug":"losetup","permalink":"https://315490.xyz/tags/losetup/"},{"name":"openwrt","slug":"openwrt","permalink":"https://315490.xyz/tags/openwrt/"},{"name":"opkg","slug":"opkg","permalink":"https://315490.xyz/tags/opkg/"},{"name":"自定义","slug":"自定义","permalink":"https://315490.xyz/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/"},{"name":"打印机","slug":"打印机","permalink":"https://315490.xyz/tags/%E6%89%93%E5%8D%B0%E6%9C%BA/"},{"name":"Windows共享打印机","slug":"Windows共享打印机","permalink":"https://315490.xyz/tags/Windows%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA/"},{"name":"小技巧","slug":"小技巧","permalink":"https://315490.xyz/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"Windows Server","slug":"Windows-Server","permalink":"https://315490.xyz/tags/Windows-Server/"},{"name":"密码安全设置","slug":"密码安全设置","permalink":"https://315490.xyz/tags/%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"},{"name":"DNS","slug":"DNS","permalink":"https://315490.xyz/tags/DNS/"},{"name":"IP","slug":"IP","permalink":"https://315490.xyz/tags/IP/"},{"name":"主机名","slug":"主机名","permalink":"https://315490.xyz/tags/%E4%B8%BB%E6%9C%BA%E5%90%8D/"},{"name":"端口","slug":"端口","permalink":"https://315490.xyz/tags/%E7%AB%AF%E5%8F%A3/"},{"name":"桌面壁纸","slug":"桌面壁纸","permalink":"https://315490.xyz/tags/%E6%A1%8C%E9%9D%A2%E5%A3%81%E7%BA%B8/"},{"name":"文件元数据","slug":"文件元数据","permalink":"https://315490.xyz/tags/%E6%96%87%E4%BB%B6%E5%85%83%E6%95%B0%E6%8D%AE/"},{"name":"Chrome","slug":"Chrome","permalink":"https://315490.xyz/tags/Chrome/"},{"name":"Edge","slug":"Edge","permalink":"https://315490.xyz/tags/Edge/"},{"name":"btrfs","slug":"btrfs","permalink":"https://315490.xyz/tags/btrfs/"},{"name":"filesystem","slug":"filesystem","permalink":"https://315490.xyz/tags/filesystem/"},{"name":"raid","slug":"raid","permalink":"https://315490.xyz/tags/raid/"},{"name":"Python","slug":"Python","permalink":"https://315490.xyz/tags/Python/"},{"name":"模块","slug":"模块","permalink":"https://315490.xyz/tags/%E6%A8%A1%E5%9D%97/"},{"name":"Turtle","slug":"Turtle","permalink":"https://315490.xyz/tags/Turtle/"},{"name":"wireguard","slug":"wireguard","permalink":"https://315490.xyz/tags/wireguard/"},{"name":"proxy","slug":"proxy","permalink":"https://315490.xyz/tags/proxy/"},{"name":"nat","slug":"nat","permalink":"https://315490.xyz/tags/nat/"},{"name":"route","slug":"route","permalink":"https://315490.xyz/tags/route/"},{"name":"nat-to-nat","slug":"nat-to-nat","permalink":"https://315490.xyz/tags/nat-to-nat/"},{"name":"mysql","slug":"mysql","permalink":"https://315490.xyz/tags/mysql/"},{"name":"iptables","slug":"iptables","permalink":"https://315490.xyz/tags/iptables/"},{"name":"firewall","slug":"firewall","permalink":"https://315490.xyz/tags/firewall/"},{"name":"nftables","slug":"nftables","permalink":"https://315490.xyz/tags/nftables/"},{"name":"软件推荐","slug":"软件推荐","permalink":"https://315490.xyz/tags/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"},{"name":"Docker","slug":"Docker","permalink":"https://315490.xyz/tags/Docker/"},{"name":"加密算法","slug":"加密算法","permalink":"https://315490.xyz/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"编码","slug":"编码","permalink":"https://315490.xyz/tags/%E7%BC%96%E7%A0%81/"},{"name":"Base64","slug":"Base64","permalink":"https://315490.xyz/tags/Base64/"},{"name":"RC4","slug":"RC4","permalink":"https://315490.xyz/tags/RC4/"},{"name":"RSA","slug":"RSA","permalink":"https://315490.xyz/tags/RSA/"},{"name":"AES","slug":"AES","permalink":"https://315490.xyz/tags/AES/"},{"name":"DES","slug":"DES","permalink":"https://315490.xyz/tags/DES/"},{"name":"hash","slug":"hash","permalink":"https://315490.xyz/tags/hash/"},{"name":"md5","slug":"md5","permalink":"https://315490.xyz/tags/md5/"},{"name":"思科","slug":"思科","permalink":"https://315490.xyz/tags/%E6%80%9D%E7%A7%91/"},{"name":"交换机","slug":"交换机","permalink":"https://315490.xyz/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"},{"name":"VLAN Tagging","slug":"VLAN-Tagging","permalink":"https://315490.xyz/tags/VLAN-Tagging/"},{"name":"VLAN Trunk","slug":"VLAN-Trunk","permalink":"https://315490.xyz/tags/VLAN-Trunk/"},{"name":"虚拟局域网中继技术","slug":"虚拟局域网中继技术","permalink":"https://315490.xyz/tags/%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%AD%E7%BB%A7%E6%8A%80%E6%9C%AF/"},{"name":"IEEE 802.1q","slug":"IEEE-802-1q","permalink":"https://315490.xyz/tags/IEEE-802-1q/"},{"name":"kali_tools","slug":"kali-tools","permalink":"https://315490.xyz/tags/kali-tools/"},{"name":"ssh","slug":"ssh","permalink":"https://315490.xyz/tags/ssh/"},{"name":"language","slug":"language","permalink":"https://315490.xyz/tags/language/"},{"name":"man","slug":"man","permalink":"https://315490.xyz/tags/man/"},{"name":"android","slug":"android","permalink":"https://315490.xyz/tags/android/"},{"name":"server","slug":"server","permalink":"https://315490.xyz/tags/server/"},{"name":"adb","slug":"adb","permalink":"https://315490.xyz/tags/adb/"}]}